#!/usr/bin/env bash

set -e

function main()
{
  TITLE="aws-s3-pg-restore"
  USAGE="Usage: ${TITLE} [--help] [-u|--user USER] [-h|--host HOST] [-p|--port PORT] BUCKET SOURCE DESTINATION"
  process-arguments "${@}"
  use-python
  use-aws
  use-postgres
  aws-s3-find-object
  aws-s3-fetch-object
  pg-reset
  pg-init
  tar-extract
  pg-configure
  pg-start
  pg-dump
  pg-stop
  pg-db-reset
  pg-restore
}

function process-arguments()
{
  ARGUMENTS=()
  while [[ "${#}" -gt 0 ]]; do
    case "${1}" in
      --help)
        shift
        help
        ;;
      -u|--user)
        if [[ "${#}" -lt 2 ]]; then
          error "${1} requires a USER"
          shift
          usage
        fi
        shift
        export PGUSER="${1}"
        shift
        ;;
      -h|--host)
        if [[ "${#}" -lt 2 ]]; then
          error "${1} requires a HOST"
          shift
          usage
        fi
        shift
        export PGHOST="${1}"
        shift
        ;;
      -p|--port)
        if [[ "${#}" -lt 2 ]]; then
          error "${1} requires a PORT"
          shift
          usage
        fi
        shift
        export PGPORT="${1}"
        shift
        ;;
      -*)
        error "Invalid option: ${1}"
        shift
        usage
        ;;
      *)
        ARGUMENTS+=("${1}")
        shift
        ;;
    esac
  done
  if [[ "${#ARGUMENTS[@]}" -lt 3 ]]; then
    error "${TITLE} requires a BUCKET, SOURCE, and DESTINATION"
    usage
  fi
  BUCKET="${ARGUMENTS[0]}"
  PREFIX="${ARGUMENTS[1]}"
  export PGDATABASE="${ARGUMENTS[2]}"
  if [[ -n "${PGHOST}" ]]; then
    export PGPORT="${PGPORT:-5432}"
  fi
  if [[ -n "${PGPORT}" ]]; then
    export PGHOST="${PGHOST:-localhost}"
  fi
  PGURL="postgresql://${PGUSER:-${USER}}@${PGHOST:-localhost}:${PGPORT:-5432}/${PGDATABASE}"
}

function use-python()
{
  if python3 --version &> /dev/null; then
    function python()
    {
      python3 "${@}"
    }
  elif python2 --version &> /dev/null; then
    function python()
    {
      python2 "${@}"
    }
  fi
  if ! python --version &> /dev/null; then
    error "Python is not installed."
    error "Visit https://www.python.org/about/gettingstarted/ to install Python."
    exit 1
  fi
  print "Using: $(python --version 2>&1)"
}

function use-pip()
{
  if ! pip --version &> /dev/null; then
    error "pip is not installed."
    error "Visit https://pip.pypa.io/en/stable/installing/ to install pip."
    exit 1
  fi
  print "Using: $(pip --version)"
}

function use-aws()
{
  if ! aws --version &> /dev/null; then
    error "AWS CLI is not installed."
    print "Installing AWS CLI..."
    use-pip
    pip install --upgrade --user awscli
  fi
  print "Using: $(aws --version 2>&1)"
}

function use-postgres()
{
  if ! postgres --version &> /dev/null; then
    error "PostgreSQL is not installed."
    error "Visit https://www.postgresql.org/download/ to install PostgreSQL."
    exit 1
  fi
  print "Using: $(postgres --version)"
}

function pip()
{
  python -m pip "${@}"
}

function aws()
{
  python -m awscli "${@}"
}

function aws-s3-find-object()
{
  print "Finding latest database backup..."
  print "  s3://${BUCKET}/${PREFIX}* -> ..."
  KEY="$(aws-s3-list-objects | awk '{ print $NF }')"
  print "Found latest database backup:"
  print "  s3://${BUCKET}/${PREFIX}* -> s3://${BUCKET}/${KEY}"
  BASE="$(basename -s .tgz "${KEY}")"
  TMP="/tmp/${BASE}"
  TGZ="/tmp/${BASE}.tgz"
  SQL="/tmp/${BASE}.sql"
  LOG="/tmp/${BASE}.log"
  SOURCE="$(cut -d - -f 1 <<< "${BASE}")"
  TIMESTAMP="$(cut -d - -f 2 <<< "${BASE}")"
  PGDATA="/tmp/${BASE}/var/lib/barman/${SOURCE}/base/${TIMESTAMP}/data"
}

function aws-s3-list-objects()
{
  aws s3api list-objects --bucket "${BUCKET}" --prefix "${PREFIX}" --query 'Contents[].Key' --output text
}

function aws-s3-fetch-object()
{
  if [[ -f "${TGZ}" ]]; then
    print "Already fetched latest database backup:"
    print "  s3://${BUCKET}/${KEY} -> ${TGZ}"
  else
    print "Fetching latest database backup..."
    print "  s3://${BUCKET}/${KEY} -> ${TGZ}"
    aws s3api get-object --bucket "${BUCKET}" --key "${KEY}" "${TGZ}"
  fi
}

function pg-reset()
{
  if [[ -d "${PGDATA}" ]]; then
    print "Already initialized temporary database:"
    print "  ${PGDATA}"
    if pg-status; then
      pg-stop
    fi
    print "Resetting temporary database..."
    print "  ${PGDATA}"
    rm -r "${PGDATA}"
  fi
}

function pg-status()
{
  print "Polling temporary database server..."
  pg_ctl --pgdata="${PGDATA}" status
}

function pg-init()
{
  print "Initializing temporary database..."
  initdb --pgdata="${PGDATA}"
}

function tar-extract()
{
  print "Extracting latest database backup..."
  print "  ${TGZ} -> ${PGDATA}"
  tar xf "${TGZ}" -C "${TMP}"
}

function pg-configure()
{
  print "Configuring temporary database..."
  rm "${PGDATA}/backup_label"
  pg_resetxlog -f "${PGDATA}"
}

function pg-start()
{
  print "Starting temporary database server..."
  pg_ctl --pgdata="${PGDATA}" -w start -o "-p 7432"
}

function pg-dump()
{
  print "Dumping latest database backup..."
  print "  postgresql://postgres@localhost:7432/${SOURCE} -> ${SQL}"
  pg_dump --username=postgres --port=7432 "${SOURCE}" > "${SQL}"
}

function pg-stop()
{
  print "Stopping temporary database server..."
  pg_ctl --pgdata="${PGDATA}" -w stop
}

function pg-db-reset()
{
  if pg-db-schema-drop; then
    pg-db-schema-create
  else
    pg-db-create
  fi
}

function pg-db-schema-drop()
{
  print "Dropping database schema..."
  print "  ${PGURL}"
  psql --command="DROP SCHEMA IF EXISTS public CASCADE"
}

function pg-db-schema-create()
{
  print "Creating database schema..."
  print "  ${PGURL}"
  psql --command="CREATE SCHEMA public"
}

function pg-db-create()
{
  print "Creating database..."
  print "  ${PGURL}"
  createdb
}

function pg-restore()
{
  print "Restoring latest database backup..."
  print "  ${SQL} -> ${PGURL}"
  psql < "${SQL}" > "${LOG}"
}

function help()
{
  print "${USAGE}"
  exit
}

function usage()
{
  error "${USAGE}"
  exit 1
}

function print()
{
  printf "\e[0;1m[\e[0;1;32m${TITLE}\e[0;1m]\e[0m " >&2
  echo "${@}" >&2
}

function error()
{
  printf "\e[0;1m[\e[0;1;31m${TITLE}\e[0;1m]\e[0m " >&2
  echo "${@}" >&2
}

main "${@}"
